#! /bin/sh

TMP_UMOUNT_TABLE=/tmp/umounting_table_fgd456
TMP_DEVICE_NAME=/tmp/mounting_divice_name
DISK_FIND_TABLE=/tmp/find_disk_abcxzy

DLNAPORT=8200
miniDLNA=minidlna

RESULT=/tmp/umount_result
DEBUG_FILE=/tmp/umount_dbg

# $1--->umounting dir

debug_info() {
	echo "$1" >> $DEBUG_FILE
}

service_start() {
	/usr/sbin/update_smb
	/usr/sbin/update_afp
	/sbin/cmdftp start
	/sbin/cmddlna start
	path=`config get green_download_path | cut -d / -f 3`
	if [ "X$(mount | grep -v ftp | grep "/dev/$path")" != "X" ]; then
		/usr/sbin/green_download.sh restart
	fi
}

service_stop() {
	
	killall -9 afpd
	killall -9 smbd
	killall -9 nmbd
	/sbin/cmdftp stop
	/sbin/cmddlna stop
	killall -9 greendownload
	/usr/bin/transbt.sh stop
        /etc/aMule/amule.sh stop
	killall -9 wget
	sleep 2
}

check_exist_part() {
	debug_info "check_exist_part $1"
	part=`echo $1 | cut -c 1-3`
	num=`mount | grep -v ftp | grep -c "/dev/$part"`
	echo $num
}

isdafake(){
	
	mount | awk '{print $1}' | grep ^/dev/sd | cut -c 6->$TMP_DEVICE_NAME
	while read LINE
	do
		divnam=`echo "$1" | awk -F/ '{print $NF}'`
		if [ "$LINE" = "$divnam" ];then
			return 1
			break
		fi
	done<$TMP_DEVICE_NAME
	return 0
}


# $1--->upper dir (/tmp/mnt or /tmp/ftpgust/shares)
umount_all()
{
	RESULT=/tmp/umount_result

	sync
	sync
	
	rm -f $RESULT

	upper_dir="$1"
	
	cd $upper_dir
	if [ $? -ne 0 ]; then
		return
	fi

	for i in * ; do
		if [ "$i" = "*" ];then
			# if there are no sub folders in the cur folder,"i" var would be '*',
			# and ignore it and jump over
			continue
		fi

		c=0
		while [ $c -le 3 ]; do
			fuser -mk "$upper_dir/$i"
			umount $upper_dir/"$i"
			if [ $? -eq 0 ]; then
				debug_info "umount_all success"
				break;
			fi
			debug_info "umount_all retry"
			let c=$c+1
			fuser -mk "$upper_dir/$i"
			sleep 1
		done
		if [ $c -eq 4 ]; then
			echo 1 > $RESULT
			debug_info "umount_all failed$(fuser -m $upper_dir/$i) at last"
			service_start
			rm -rf /tmp/umount_locked
			exit 1
		fi
		rmdir "$i"
	done	
}

umount_part()
{
 # call from hotplug2
	RESULT=/tmp/umount_result
	
	sync
	sync

	rm -f $RESULT
	
	umount_dir="$1"

	if isdafake "$umount_dir"
	then
		return
	fi

	c=0
	while [ $c -le 10 ]; do
		sync
		fuser -mk "$umount_dir"
		umount "$umount_dir"
		if [ $? -eq 0 ];then
			debug_info "umount_part $umount_dir success"
			break
		fi
		debug_info "umount_part $umount_dir retry"
		fuser -mk "$umount_dir"
		let c=$c+1
	done
	if [ $c -eq 11 ]; then
		echo 1 > $RESULT
		debug_info "umount_part $umount_dir failed at last"
		service_start
		rm -rf /tmp/umount_locked
		exit 1
	fi
	rmdir "$umount_dir"
	if [ $? -ne 0 ];then
		onlyme=$(cat /proc/partitions | grep sd | wc -l)
		if [ $onlyme -eq 0 ];then
			/etc/init.d/samba stop
			killall minidlna
			sleep 1
			umount "$umount_dir"
			rmdir "$umount_dir"
		fi
	fi

}

# $1--->device name(sda1 or sdb3 or sdc3)
# $2--->upper dir for ftp(ftpadmin or ftpguest)
umount_part_ftp()
{
	devnam=$1
	up_dir=$2
	
	mount | grep '^/dev/$devnam\>' | awk '{print $3}' | grep ^/tmp/$up_dir | sed -e 's/\\040/ /g'>$TMP_UMOUNT_TABLE
	while read LINE
	
	do
		umount_part "$LINE"
	done<$TMP_UMOUNT_TABLE

}

umount_usb_log()
{
	if [ ! -f $DISK_FIND_TABLE ];then
		return
	fi

	while read LINE
	do
		if [ "x$LINE" = "x" ];then
			break
		fi

		vendor=`echo $LINE | awk -F* '{print $2}'`
		volume=`echo $LINE | awk -F* '{print $3}'`
		vendor=`echo $vendor`
		volume=`echo $volume`
		logger "[USB device detached] The USB storage device $vendor ($volume) is removed from the router,"

	done<$DISK_FIND_TABLE
}

check_usb_led()
{
       port1_mounted=0
       port2_mounted=0

       ### Check USB port 1
       tmp=`ls -l /sys/block | grep -v mtdblock | grep sd`
       if [ "X$(echo $tmp | grep usb1)" != "X" ]; then

               tmp=`ls -l /sys/block | grep -v mtdblock | grep sd | grep usb1 | awk '{print $NF}'`
               for list in $tmp; do
                       tmpdev=`echo ${list##*/}`
                       if [ "X$(mount | grep "/dev/$tmpdev")" != "X" ]; then
                               echo "EHCI PORT 1 has others mounted devices $tmpdev !"
                               port1_mounted=1 && break
                       fi
               done

               if [ $port1_mounted -eq 0 ]; then
                       tmp_led=`ps | grep "usb_led 2" | grep -v grep | awk '{print $1}'`
                       for list in $tmp_led; do
                               kill -9 $list 2> /dev/null
                       done

                       tmp_led=`ps | grep "usb_led 0" | grep -v grep | awk '{print $1}'`
                       for list in $tmp_led; do
                               kill -9 $list 2> /dev/null
                       done
                       echo "USB LED 1 OFF !"
                       ledcontrol -n usb0 -c green -s off
               fi
       fi

       ### Check USB pot 2
       tmp=`ls -l /sys/block | grep -v mtdblock | grep sd`
       if [ "X$(echo $tmp | grep usb2)" != "X" ]; then

               tmp=`ls -l /sys/block | grep -v mtdblock | grep sd | grep usb2 | awk '{print $NF}'`
                for list in $tmp; do
                        tmpdev=`echo ${list##*/}`
                        if [ "X$(mount | grep "/dev/$tmpdev")" != "X" ]; then
                                echo "EHCI PORT 2 has others mounted devices $tmpdev !"
                                port2_mounted=1 && break
                        fi
                done

               if [ $port2_mounted -eq 0 ]; then
                       tmp_led=`ps | grep "usb_led 3" | grep -v grep | awk '{print $1}'`
                       for list in $tmp_led; do
                               kill -9 $list 2> /dev/null
                       done

                       tmp_led=`ps | grep "usb_led 1" | grep -v grep | awk '{print $1}'`
                       for list in $tmp_led; do
                               kill -9 $list 2> /dev/null
                       done
                       echo "USB LED 2 OFF !"
                       ledcontrol -n usb1 -c green -s off
               fi
        fi
}

cat /dev/null >> $DEBUG_FILE
count=0
while [ 1 ]; do
	if [ $count -ge 10 ]; then
		debug_info "umount locked time out !"	
		rm -rf /tmp/umount_locked
		exit 1
	fi
	if [ -f "/tmp/umount_locked" ]; then
		debug_info "umount is locked !"
		count=$((count+1)) && sleep 1
	else
		break
	fi
done

touch "/tmp/umount_locked"

debug_info "umount locked now !"

service_stop

debug_info "hotplug2.umount !"

if [ $# -eq 0 ]; then
	debug_info "hotplug2.umount ALL !"
	umount_all "/tmp/ftpadmin/shares"
	umount_all "/tmp/ftpguest/shares"
	umount_all "/tmp/mnt"
else
	debug_info "hotplug2.umount "$1" !"
	umount_part_ftp "$1" "ftpadmin"
	umount_part_ftp "$1" "ftpguest"
	umount_part "/tmp/mnt/$1"
	if [ "$(check_exist_part "$1")" = "0" ]; then
		service_start
	fi
	test -f $RESULT || echo 0 > $RESULT
	rm -rf /tmp/umount_locked
	exit 1
fi

test -f $RESULT || echo 0 > $RESULT

umount_usb_log
check_usb_led
/usr/bin/killall usbled
/usr/sbin/usbled
/usr/sbin/update_smb
/usr/sbin/update_afp
/sbin/cmdftp start
/sbin/cmddlna start
rm -rf /tmp/umount_locked
