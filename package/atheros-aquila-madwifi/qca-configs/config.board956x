#
# Copyright (c) 2013 Qualcomm Atheros, Inc.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

# Set the toolchain path
export TOOLCHAIN=buildroot-2009.08
export TOOLPREFIX=mips-linux-uclibc-
export TOOLARCH=build_mips/staging_dir/usr
export UBOOT_GCC_4_3_3_EXTRA_CFLAGS=-fPIC

export KERNEL=mips-linux-2.6.31
export KERNELVER=2.6.31
export KERNELTARGET=vmlinux.bin
export COMPRESSKERNEL=y
export KERNELARCH=mips

#Dual flash - spi nor and nand support. 
ifeq ($(BUILD_SPI_NAND),1) #{
export ATH_SPI_NAND=1
export ATH_DUAL_FLASH=1
export FLASH_SIZE=2
export ATH_SPI_NAND_CS_GPIO=6
endif 

#export TARGETFSSIZE=6488064
ifeq ($(BOOT_FROM_NAND),1) #{
# should be multiple of 128k
export TARGETFSSIZE=4194304
export ATH_CAL_NAND_FLASH=1
export ATH_CAL_NAND_PARTITION="caldata"
else #}{
ifeq ($(ATH_DUAL_FLASH),1) #{
export TARGETFSSIZE=4194304
export ATH_CAL_NAND_FLASH=1
export ATH_CAL_NAND_PARTITION="caldata"
else #}{
export TARGETFSSIZE=3080192
endif #}
endif #}
export CONFIG_MIPS_74K_KERNEL_OPTIMIZATION=1
#export CONFIG_EMULATION=1
#export BOOT_FROM_NAND=1
export ATH_SUPPORT_CWM=1
export ATH_CAP_CWM=1


ifeq ($(BUILD_CONFIG),_powercloud) #{
export TARGETFSSIZE=3014656
endif #}

export BUSYBOX=busybox-1.01
export WIRELESSTOOLS=wireless_tools.29
export WIRELESSTOOLSLIB=libiw.so.29

export BUILD_WPA2=y

ifeq ($(USE_GCC_4_5_1), y) #{
export TOOLCHAIN=gcc-4.5.1
export ENABLE_DSP_ASE=y
endif #}

ifeq ($(BUILD_WLAN_PBO_DATA),y) #{
export GCOV_KERNEL_ENABLE=y
export WLAN_PBO_DATA_PATH=$(TOPDIR)/build/scripts/$(CFG_BOARD_TYPE)/pbo_data/wlan
endif #}

ifeq ($(USE_WLAN_PBO_DATA),y) #{
export GCOV_KERNEL_ENABLE=y
export WLAN_PBO_DATA_PATH=$(TOPDIR)/build/scripts/$(CFG_BOARD_TYPE)/pbo_data/wlan
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249 tb753)) #{
export BUS=AHB
export AP_TYPE=single
else #}{
export BUS=dual
export AP_TYPE=dual
endif #}

export AH_CAL_RADIOS_PCI=1
ifeq ($(ATH_CAL_NAND_FLASH),1) #{
        export AH_CAL_LOCATIONS_PCI=0x4000
else #}{
        export AH_CAL_LOCATIONS_PCI=0xbfff4000
endif #}
export AH_CAL_IN_FLASH_AHB=1
export AH_CAL_RADIOS_AHB=1
ifeq ($(ATH_CAL_NAND_FLASH),1) #{
        export AH_CAL_LOCATIONS_AHB=0x0
else #}{
        export AH_CAL_LOCATIONS_AHB=0xbfff0000
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249 tb753)) #{
export ATH_SUPPORT_DFS=0
else #}{
export ATH_SUPPORT_DFS=1
endif #}

export MADWIFITARGET=mipsisa32-be-elf
export FUSIONTARGET=mipsisa32-be-elf
export TARGETARCH=mipsisa32-be-elf

# Ethernet defines
export GMAC_QCA956x=1

ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249 tb753)) #{
export COMPRESSED_UBOOT = 1
export ETH_CONFIG=_s27
export ATH_GMAC_GE1_IS_CONNECTED=1
export ATH_GMAC0_MII=ATHR_MII
export ATH_GMAC1_MII=ATHR_RGMII
export ATH_CFG_SGMII=1
export FLASH_SIZE=4
#export BUILD_OPTIMIZED=y
export ATH_LINK_INTR=1
endif #}
ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249)) #{
export pll=CFG_PLL_750_400_250
export ddr_cas=4
export ETH_SOFT_LED=0
export ATH_GMAC_WAN_PORT_LED=2
export ATH_GMAC_LAN_PORT0_LED=7
export ATH_GMAC_LAN_PORT1_LED=6
export ATH_GMAC_LAN_PORT2_LED=5
export ATH_GMAC_LAN_PORT3_LED=4
endif #}
ifneq (,$(findstring $(CFG_BOARD_TYPE),tb753)) #{
export pll=CFG_PLL_750_400_250
export ddr_cas=4
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),ap151-020 ap151 tb754)) #{
export ETH_CONFIG=_s27
export ATH_GMAC_GE1_IS_CONNECTED=1
export ATH_GMAC0_MII=ATHR_MII
export ATH_GMAC1_MII=ATHR_RGMII
export ATH_CFG_SGMII=1
export AH_CAL_IN_FLASH_PCI=1
export FLASH_SIZE=8
export ATH_LINK_INTR=1
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),ap151-020)) #{
export pll=CFG_PLL_775_650_258
export ddr_cas=5
export ATH_SUPPORT_LED=1
export ATH_24G_LED_GPIO=19
export OL_ATH_SUPPORT_LED=1
export OL_GPIO_PIN=1
export ETH_SOFT_LED=0
export ATH_GMAC_WAN_PORT_LED=2
export ATH_GMAC_LAN_PORT0_LED=8
export ATH_GMAC_LAN_PORT1_LED=9
export ATH_GMAC_LAN_PORT2_LED=10
export ATH_GMAC_LAN_PORT3_LED=18
export AP_USB_LED_GPIO=21
export JUMPSTART_GPIO=1
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),ap151)) #{
export pll=CFG_PLL_775_650_258
export ddr_cas=5
export ATH_SUPPORT_LED=1
export ATH_24G_LED_GPIO=19
export OL_ATH_SUPPORT_LED=1
export OL_GPIO_PIN=1
export ETH_SOFT_LED=0
export ATH_GMAC_WAN_PORT_LED=2
export ATH_GMAC_LAN_PORT0_LED=22
export ATH_GMAC_LAN_PORT1_LED=21
export ATH_GMAC_LAN_PORT2_LED=16
export ATH_GMAC_LAN_PORT3_LED=15
export JUMPSTART_GPIO=14
export WPS_LED_GPIO_PIN=1
endif #}


ifneq (,$(findstring $(CFG_BOARD_TYPE),tb754)) #{
export pll=CFG_PLL_750_400_250
export ddr_cas=4
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),ap152 tb755)) #{
export ETH_CONFIG=_s17
#export ETH_CONFIG2=_s17
export ATH_GMAC_GE0_IS_CONNECTED=1
export ATH_GMAC0_MII=ATHR_SGMII
export ATH_GMAC1_MII=ATHR_SGMII
export ATH_S17_MAC0_SGMII=1
export ATH_CFG_SGMII=1
export ATH_SGMII_FORCED=1
export ATH_CONFIG_SWAP_SGMII=0
export AH_CAL_IN_FLASH_PCI=1
export ATH_SGMII_FORCED=1
ifneq ($(ATH_SPI_NAND), 1)
export FLASH_SIZE=8
endif 
export BUILD_CONFIG=_vlan
export ATH_LINK_INTR=1
export ATH_S17INT_GPIO=10
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),ap152)) #{
export pll=CFG_PLL_775_650_258
export ddr_cas=5
export JUMPSTART_GPIO=2
export ATH_SUPPORT_LED=0
#export ATH_24G_LED_GPIO=19
export OL_ATH_SUPPORT_LED=0
export OL_GPIO_PIN=1
export AP_USB1_LED_GPIO=7
export AP_USB2_LED_GPIO=8
export WPS_LED_GPIO_PIN=1
endif #}
ifneq (,$(findstring $(CFG_BOARD_TYPE),tb755)) #{
export pll=CFG_PLL_750_667_250
export ddr_cas=6
endif #}

ifeq ($(CFG_BOARD_TYPE),dragonflyemu) #{
export ETH_CONFIG=_s27
export ATH_GMAC_GE1_IS_CONNECTED=1
export ATH_GMAC0_MII=ATHR_RGMII
export ATH_GMAC1_MII=ATHR_SGMII
export ATH_CFG_SGMII=1
endif #}

export BUILD_ATHR_HOSTAP=1

export ATH_GMAC_RX_TASKLET=1
export ATH_DMA_CHECK=1

ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249 tb753 ap151-020 ap151 tb754)) #{
export ATH_GMAC_RX_PKT_CNT=32
export ATH_GMAC0_TX_CNT=128
export ATH_GMAC0_RX_CNT=128

export ATH_GMAC1_TX_CNT=128
export ATH_GMAC1_RX_CNT=128
export ATH_GMAC_DESC_SRAM=1
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),ap152 tb755)) #{
export ATH_GMAC_RX_PKT_CNT=160
export ATH_GMAC0_TX_CNT=128
export ATH_GMAC0_RX_CNT=224

export ATH_GMAC1_TX_CNT=128
export ATH_GMAC1_RX_CNT=224
export ATH_GMAC_DESC_SRAM=1
endif #}
export ATH_GMAC1_RXFCTL=1
export ATH_GMAC1_TXFCTL=1

export ATH_GMAC0_RXFCTL=1
export ATH_GMAC0_TXFCTL=1


export ATH_GMAC_HW_QOS=0


export ATH_GMAC_LEN_PER_TX_DS=1536
export ATH_GMAC_LOCATION=0xbfff0000

# For S17 H/W Accelerator
ifeq ($(ETH_CONFIG),_s17_hwaccel) #{
export BUILD_CONFIG=_routing
#For switch sdk board variants
export SSDK_BOARD_TYPE=.ap152
endif #}

#ifneq ($(ETH_CONFIG),_s27)
#export BUILD_EXT=$(ETH_CONFIG)$(ETH_CONFIG2)
#endif

export BUILD_UMAC=1

# Set Phy Err Diagnostics (Radar detection) to be enabled for AP builds
export ATH_CAP_PHYERR_DIAG=1

export AR5416_G_MODE=1
export AR9100=0
export AR7240_EMU=1
ifeq ($(BUILD_WMACEMU),1) #{
export AH_DEBUG=1
else #}{
export AH_DEBUG=0
endif #}

export AH_SUPPORT_AR5210=0
export AH_SUPPORT_AR5212=0
export AH_SUPPORT_5111=0
export AH_SUPPORT_5112=0
export AH_SUPPORT_2413=0
export AH_SUPPORT_5413=0
export AH_SUPPORT_2316=0
export AH_SUPPORT_2317=0
export AH_SUPPORT_2425=0
export AH_SUPPORT_SOWL=0
export AH_SUPPORT_AR5416=1
ifeq ($(BUILD_WMACEMU),1) #{
export AR9340_EMULATION=1
export AR9550_EMULATION=1
export AR9560_EMULATION=1
export AR9300_EMULATION=1
export AR9300_EMULATION_BB=1
endif #}
export AH_SUPPORT_KITE_ANY=1
export AH_SUPPORT_KITE_10=1
export AH_SUPPORT_KITE_12=1
export AH_SUPPORT_KIWI_10=1
export AH_SUPPORT_KIWI_ANY=1
export AH_SUPPORT_KIWI_11=1
export AH_SUPPORT_K2=0
export AH_SUPPORT_EEPROM_AR9287=1
export ATH_SUPPORT_VLAN=1

# For software NAT
ifeq ($(BUILD_CONFIG),_routing) #{
ifneq ($(BUILD_S17HNAT),1) #{
#enable host decap feature for buf
export PERE_IP_HDR_ALIGNMENT_WAR=1
endif #}
endif #}

export ATH_CHAINMASK_SELECT=0
ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249)) #{
export ATH_RXBUF=256
export ATH_TXBUF=256
else
export ATH_RXBUF=512
export ATH_TXBUF=512
endif
export ATH_CAP_AMSDU=1
export IEEE80211_MCAST_ENHANCEMENT=1
export ATH_RB=0
export AR5416_G_MODE=1
export AH_SUPPORT_HOWL=0
export AH_SUPPORT_OWL=1
export AR5416_INT_MITIGATION=1
export ATH_SUPPORT_IQUE=1
export ATH_SUPPORT_MCAST2UCAST=1
export ATH_SUPPORT_GREEN_AP=1
export ATH_SUPPORT_DYN_TX_CHAINMASK=1
export AH_DESC_NOPACK=1
export ATH_SUPPORT_PAPRD=1
# export ATH_TRAFFIC_FAST_RECOVER=1

export AH_SUPPORT_DRAGONFLY=1
export AH_SUPPORT_WASP=0

ifeq ($(BUILD_WPA2),y) #{
export ATH_WPS_IE=1
else #}{
export ATH_WPS_IE=0
endif #}

ifeq ($(BUILD_SAMBA),y) #{

export SAMBA_MIPS_74K_CFLAGS=-funit-at-a-time -Os -pipe -march=74kc -mtune=74kc

#Populate the utilities to be removed

sbin_list1=sbin/802* sbin/apst* sbin/ath* sbin/ifr* sbin/iwe*
sbin_list2=sbin/iwsp* sbin/iwli* sbin/radar* sbin/iwge* sbin/pktl*
samba_list=usr/local/bin/* usr/local/sbin/nmb* usr/local/sbin/smb*nt

export INSTALL_BLACKLIST="usr/bin/gdb* $(sbin_list1) $(sbin_list2) $(samba_list)"

endif #}


#export ATH_SST_FLASH=y
#export ATH_DUAL_FLASH=1
#export EXTRAVERSION=-9.2.0.39.3
#export ATH_SINGLE_CFG=1
export ATH_EXT_AP=1

export ATH_SUPPORT_QUICK_KICKOUT=1
export ATH_SUPPORT_TxBF=0
#export ATH_LOW_POWER_ENABLE=1

export KBUILD_MODPOST_WARN=y

#Remove the example files in apps/wpa2 directory
export BUILD_WPA2_NO_EXAMPLES=y

ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249 tb753 tb754 tb755)) #{
export JUMPSTART_GPIO=1
endif #}

export ATH_SUPPORT_DESC_CACHABLE=1
export ATH_TXQ_BH_LOCK=1

#turn on ap-only code
export UMAC_SUPPORT_APONLY=1
export ATH_WDS_SUPPORT_APONLY=1

export ATH_SUPPORT_WIFIPOS=0
export ATH_SUPPORT_RX_PROC_QUOTA=0

export ATH_DEBUG=0
export UMAC_SUPPORT_TX_FRAG=1
export ATH_TX_COMPACT=1
export ATH_INT_TX_MITIGATION=1

ifneq ($(strip $(CONFIG_BASIC)),1) #{
export ATH_SUPPORT_VOWEXT=0
export ATH_VOW_EXT_STATS=0

export DIRECT_ATTACH=1
#export UMAC_SUPPORT_VI_DBG=1

# Spectral Analysis support
export ATH_SUPPORT_SPECTRAL=0

export ATH_SUPPORT_VOW_DCS=1

ifneq (,$(findstring $(CFG_BOARD_TYPE),ap151-020 ap151 ap152 tb754 tb755)) #{
export ATH_SUPPORT_TX99=1
endif #}


# Periodically measure performance stats such as throughput, PER
# But enabling this option can affect peak performance slightly.
export UMAC_SUPPORT_PERIODIC_PERFSTATS=0

# Measure channel utilization
# Enabling this option can affect peak performance slightly.
export UMAC_SUPPORT_CHANUTIL_MEASUREMENT=1

#enable BSS load support
export UMAC_SUPPORT_BSSLOAD=1
#enable radio measurement support for voice enterprise
export UMAC_SUPPORT_RRM=1
#enable wireless network management support for voice enterprise
export UMAC_SUPPORT_WNM=1
#enable WMM admission control support for voice enterprise
export UMAC_SUPPORT_ADMCTL=1
#enable quiet period support
export UMAC_SUPPORT_QUIET=1
#enable UAPSD RATECTL
export ATH_SUPPORT_UAPSD_RATE_CONTROL=1
# Randomness generation support from hardware
export ATH_GEN_RANDOMNESS=1

# IEEE 802.11v Proxy ARP
export UMAC_SUPPORT_PROXY_ARP=1

# Hotspot 2.0 DGAF Disable support
export UMAC_SUPPORT_DGAF_DISABLE=1

# Hotspot 2.0 L2 Traffic Inspection and Filtering support
export UMAC_SUPPORT_HS20_L2TIF=1
export ATH_SUPPORT_HS20=1

# Disable STA mode support to gain some CPU cycles
export UMAC_SUPPORT_STA_MODE=0
export ATH_HW_TXQ_STUCK_WAR=1

#Disable increment of some node level stats in the Tx data path
#to gain a (small) improvement in CPU utilization.
export UMAC_SUPPORT_TXDATAPATH_NODESTATS=0

endif #}

# S/W retry mechanism (in addition to H/W retries) +
# TID queue pause/unpause and ps-poll handling in LMAC
export ATH_SWRETRY=1
# ATH_SWRETRY_MODIFY_DSTMASK enables HW optimization to filter pkts on
# failures.
export ATH_SWRETRY_MODIFY_DSTMASK=0

ifeq ($(CONFIG_TYPE),wrap)
    BUILD_SUFFIX=_wrap
endif

#ifneq ($(ETH_CONFIG),_s27)
ifneq ($(11AC_OFFLOAD), 1) 
export BUILD_EXT=$(ETH_CONFIG)$(ETH_CONFIG2)$(BUILD_SUFFIX)
else
export BUILD_EXT=_11ac_offload$(ETH_CONFIG)$(ETH_CONFIG2)$(BUILD_SUFFIX)
endif
#endif
#Enable pktlog by default
export REMOVE_PKT_LOG=0

# Include performance_power offload support for 11ac
ifeq ($(11AC_OFFLOAD), 1)
export QCA_OL_11AC_FAST_PATH=1
export ATH_11AC_TXCOMPACT=1
export UMAC_SUPPORT_VAP_PAUSE=1
export ATH_VAP_PAUSE_SUPPORT=1
export ATH_PERF_PWR_OFFLOAD=1
export ATH_TGT_TYPE=AR9888
export ATH_HIF_TYPE=pci
export FORCE_LEGACY_PCI_INTERRUPTS=1
export LOAD_ARRAY_FW=1
export WDI_EVENT_ENABLE=1

# 0: 128B - default, 1: 256B, 2: 64B
export ATH_OL_11AC_DMA_BURST=1
export ATH_OL_11AC_MAC_AGGR_DELIM=0


endif
export BIG_ENDIAN_HOST=1
export ATH_SUPPORT_KEYPLUMB_WAR=1
export ATH_SUPPORT_TIDSTUCK_WAR=1
export LMAC_SUPPORT_POWERSAVE_QUEUE=1

ifneq (,$(findstring $(CFG_BOARD_TYPE),ap151-020 ap151 ap152)) #{
# Set the below to 1 to enable Intelligent Channel Manager (ICM) support.
# Note that currently, a pre-requisite is that ATH_SUPPORT_SPECTRAL should
# be 1.
export ATH_SUPPORT_ICM=1
export ATH_SUPPORT_HYFI_ENHANCEMENTS=1
ifeq ($(ATH_SUPPORT_HYFI_ENHANCEMENTS), 1)
export ATH_SUPPORT_DSCP_OVERRIDE=1
endif
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249 tb753)) #{
else #}{
export ATH_SUPPORT_WAPI=0
endif #}


#override WLAN setting for wrap
ifeq ($(CONFIG_TYPE),wrap)
export UMAC_SUPPORT_RRM=0
export UMAC_SUPPORT_APONLY=0
export UMAC_SUPPORT_WNM=0
export UMAC_SUPPORT_QUIET=0
export ATH_SUPPORT_WAPI=0
export QCA_OL_11AC_FAST_PATH=0
export ATH_11AC_TXCOMPACT=0
export ATH_SUPPORT_TX99=0
export ATH_SUPPORT_WRAP=1
export UMAC_SUPPORT_STA=1
export DEBUG_TOOLS=1
export ATH_SUPPORT_WIFIPOS=0
export ATH_TX_COMPACT=1
endif
