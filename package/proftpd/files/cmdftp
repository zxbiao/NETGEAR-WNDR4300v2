#!/bin/sh

config=/bin/config
PROFTPD_CONF=/tmp/proftpd.conf
TMP_DATA_XYZ=/tmp/tmp_data_xyz
TMP_IS_SDA=/tmp/tmp_is_sda
proftpd_tmpfile=/tmp/tmp_ftp_file
TMP_DEVICE_NAME=/tmp/tmp_device_name_xyz
TMP_LOCK_FILE=/tmp/tmp_lock_abc123xyz

check_all_folder_limit()
{
	if [ -f /tmp/shared_usb_folder ]; then rm -f /tmp/shared_usb_folder; fi
	${config} show | grep "shared_usb_folder" | cut -d '*' -f3,4 > /tmp/shared_usb_folder
	while read folder
	do
		if [ "${folder}X" != "0*0X" ]; then return 1; fi
	done < /tmp/shared_usb_folder
	rm -f /tmp/shared_usb_folder
	return 0
}

config_ftp_user()
{
	# user setting
	echo "root:!:0:0:root:/tmp:/bin/ash"			> /etc/passwd
	echo "admin:x:500:1:Linux User,,,:/tmp/ftpadmin:/bin/ash"	>>/etc/passwd
	echo "guest:*:65534:65534:guest:/tmp/ftpguest:/bin/ash"		>>/etc/passwd

	# group setting
	echo "root:x:0:"        > /etc/group
	echo "admin:x:1:"       >>/etc/group
	echo "guest:x:65534:"   >>/etc/group
	
	#change the passwd in proftpd/modules/mod_auth_unix.c
	# passwd setting
	#echo "admin:$($config get http_passwd):10957:0:99999:7:::"	> /etc/shadow
	#echo "guest::10957:0:99999:7:::"				>>/etc/shadow
}

creat_cur_workdir()
{
	mkdir -p /tmp/ftpadmin
	mkdir -p /tmp/ftpadmin/shares
	mkdir -p /tmp/ftpguest
	mkdir -p /tmp/ftpguest/shares
}

append_read_allowuser()
{
	case "$1" in
		0) echo "			AllowUser admin"
		   echo "			AllowUser guest";;
        	1) echo "			AllowUser guest";;
        	2) echo "			AllowUser admin";;
		*);;
	esac
}

append_write_allowuser()
{
	case "$1" in
		0) echo "			AllowUser admin"
		   echo "			AllowUser guest";;
        	1) echo "			AllowUser admin";;
        	2) echo "			AllowUser admin";;
		*);;
	esac
}

print_onesharefolder_config()
{
	cat <<EOF >>$proftpd_tmpfile
	<Directory /tmp/ftpguest/shares/$1>
	AllowOverwrite    on
		<Limit Read>
EOF
	append_read_allowuser $2>> $proftpd_tmpfile
	cat <<EOF >> $proftpd_tmpfile
			DenyAll
		</Limit>
		<Limit Write>
EOF
	append_write_allowuser $2>> $proftpd_tmpfile
	cat <<EOF >> $proftpd_tmpfile
			DenyAll
		</Limit>
	</Directory>
EOF
}


print_common_head()
{
	cat <<EOF
ServerName		NETGEAR-WNDR4500v3
ServerType		standalone
UseReverseDNS		off
Umask			022
Port			21
MaxInstances		30
AllowOverwrite		on
AuthOrder		 mod_auth_unix.c
ScoreboardFile		/tmp/proftpd.scoreboard
PidFile			/tmp/proftpd.pid
DefaultServer           on
<IfModule mod_delay.c>
        DelayEngine off
</IfModule>
<Global>
	AllowOverwrite		on
	User			root
	Group			root
	DefaultRoot		~
EOF

}

print_common_tail()
{
	cat <<EOF
</Global>
EOF
}

umount_all()
{
        sync
        sync

        cd /tmp/$1/shares
	if [ $? -ne 0 ]; then
		return
	fi

        for i in * ; do
		if [ "$i" = "*" ];then
			# if there are no sub folders in the cur folder,"i" var would be '*',
			# and ignore it and jump over
			continue
		fi
                
		c=0
                while [ $c -le 3 ]; do
                        umount /tmp/$1/shares/"$i"
                        if [ $? -eq 0 ]; then
                                break;
                        fi
                        let c=$c+1
                done
                rmdir "$i"
        done
}

# param: devnam=sda1, relative_path="/lost+found", ftppath="network", rootdir="ftpadmin" access="0,1,2"

mount1()
{
	mkdir -p /tmp/$4/shares/"$3"
	mount -o utf8=yes,fmask=0000,dmask=0000 /mnt/$1"$2" /tmp/$4/shares/"$3"
	if [ $? -ne 0 ];then
		# UTF8 can't be added to mounting ext2/3
        	mount /mnt/$1"$2" /tmp/$4/shares/"$3"
        	
		if [ $? -ne 0 ];then
			rmdir /tmp/$4/shares/"$3"
		else
			case "$5" in
				0)chmod -R 777 /tmp/$4/shares/"$3";;
				1)[ "$4" = "ftpadmin" ] && chmod -R 777 /tmp/$4/shares/"$3";;
				2)chmod -R 777 /tmp/$4/shares/"$3";;
				*);;
			esac
		fi
	fi
}

# parameter: $1:sda1, $2:/, $3:ftppath, $4:access

map_usb_to_ftp()
{
	case "$4" in
		0 | 1)mount1 "$1" "$2" "$3" "ftpadmin" "$4"
		      mount1 "$1" "$2" "$3" "ftpguest" "$4";;
        	2)    mount1 "$1" "$2" "$3" "ftpadmin" "$4";;
		*);;
	esac

}

isdafake(){

	df | awk '{print $1}' | grep ^/dev/sd | cut -c 6->$TMP_DEVICE_NAME
	while read LINE
	do
		if [ "$LINE" = "$1" ];then
			return 1
			break;
		fi
	done<$TMP_DEVICE_NAME
	
	return 0
}

Itoa()
{
	array="U T S R Q P O N M L K J I H G F E D C B A"
	i=0
	for ch in $array;do
		if [ "$i" = "$1" ];then
			echo "$ch"
			break
		fi
		let i=$i+1
	done
}

get_vendor_from_disk()
{
	dev=`echo "$1" | cut -c 1-3`
	vendor=`cat /sys/block/$dev/device/vendor`
	model=`cat /sys/block/$dev/device/model`

	#vendor=$(echo ${vendor} | sed 's/[[:space:]]*$//')
	#model=$(echo ${model} | sed 's/[[:space:]]*$//')

	device_vendor="$vendor $model"
	echo "$device_vendor"
}


construct_volume()
{
	tmp_capacity=$2
	if [ $tmp_capacity -ge 1024 ] ;then
		GByte=`expr $tmp_capacity / 1024`
		left=`expr $tmp_capacity % 1024`
		left=`expr $left \* 100`
		left=`expr $left / 1024`

		len=`echo ${left} | wc -L`
		if [ $len -eq 1 -a $left -ne 0 ];then
			left=0$left
		fi

		if [ $left -eq 0 ];then
			format_capacity="$GByte GB"
		else
			format_capacity="$GByte.$left GB"
		fi
	else
		format_capacity="$2 MB"
	fi

	echo "$1 Drive ($format_capacity)"
}


# parameters:
#$1---> disk name"sda1 or sdb1 or sdc"
#$2---> label "U T O P Q"
#$3--->capacity "3.23GB  456MB"
get_volume_from_disk()
{
	volume=`/usr/sbin/vol_id -L /dev/$1`
	if [ "x$volume" = "x" ];then
		volume="`construct_volume $2 $3`"
	fi
	echo "$volume"
}

# parameters:
#$1---> disk name"sda1 or sdb1 or sdc"
get_partition_from_disk()
{
	dev=`echo "$1" | cut -c 1-3`
	partition=`cat /sys/block/$dev/$1/partition`
	echo "$partition"
}

is_sda()
{
	i=0
	cat /proc/partitions | awk '{print $4}' | grep sd > $TMP_IS_SDA
	while read LINE
	do
		dev=`echo "$LINE" | cut -c 1-3`
		if [ "$1" = "$dev" ];then
			let i=$i+1
		fi
	done < $TMP_IS_SDA
	rm $TMP_IS_SDA
	if [ "$i" = 1 ];then
		return 1
	else
		return 0
	fi
}

#------------------------------------
#cat /proc/partitions
#major minor  #blocks  name
#
#  31     0        256 mtdblock0
# ...
#   8     0   78150744 sda
#   8     1          1 sda1	#an extended partition	
#   8     5   23711908 sda5
#   8     6   27487183 sda6
#   8     7   26940973 sda7
#   8    16     248288 sdb	#
#   8    17     248272 sdb1
#-------------------------------------
scan_disk_entries()
{
	i=0
	df | awk '{print $1,$2}' | grep sd >$TMP_DATA_XYZ

	sharename_list="" #recode all sharename
	while read LINE
	do
		capacity=`echo $LINE | awk '{print $2}'`
		M_capacity=`expr $capacity / 1024`

		# It indicates that this partition should be an extended partition.
		if [ "$M_capacity" = "0" ];then
			continue
		fi

		part_name=`echo $LINE | awk '{print $1}' | grep ^/dev/sd | cut -c 6-`
		number=`echo "$part_name" | cut -c 4-`
		if [ -z "$number" ];then
			if is_sda
			then
				continue
			fi
		fi

		label=`Itoa "$i"`
		if [ "x$label" = "x" ]; then
			continue
		fi

		# ignore the dev like "sdb"
		#if [ "`echo ${#part_name}`" != "4" ];then
		#	continue
		#fi

		#sda7 is not dafake, but it still should be record, so move i=i+1 before the isdafake check.	
		#let i=$i+1

		if isdafake "$part_name"
		then
			continue
		fi
		
		let i=$i+1

		vendor=`get_vendor_from_disk "$part_name"`
		volume=`get_volume_from_disk "$part_name" "$label" "$M_capacity"`
		partition=`get_partition_from_disk "$part_name"`

		if [ "x$vendor" = "x" -o "x$volume" = "x" ];then
			continue
		fi

		#find the share folder in this disk
		scan_sharefoler_in_this_disk "$part_name" "$vendor" "$volume" "$label" "$partition"

		if [ $i -ge 20 ];then
			break
		fi
	done<$TMP_DATA_XYZ

	rm -f $TMP_DATA_XYZ
}

scan_sharefoler_in_this_disk() #$1: dev $2: vendor $3: volume $4:label
{
        j=0

       # sharename_list="" #recode all sharename
        while true
        do
                sharefolder_item=$($config get "shared_usb_folder$j")
                if [ "x$sharefolder_item" = "x" ];then
                        break;
                fi

                sharename=`echo "$sharefolder_item" | awk -F* '{print $1}'`
            relative_path=`echo "$sharefolder_item" | awk -F* '{print $2}'`
                 readable=`echo "$sharefolder_item" | awk -F* '{print $3}'`
                 writable=`echo "$sharefolder_item" | awk -F* '{print $4}'`
                   volume=`echo "$sharefolder_item" | awk -F* '{print $5}'`
                   vendor=`echo "$sharefolder_item" | awk -F* '{print $6}'`
		   partition=`echo "$sharefolder_item" | awk -F* '{print $8}'`

                   let access=$readable+$writable

	   	if [ "$volume" = "$3" -a "$vendor" = "$2 "  -a "$partition" = "$5" ]; then
	                #check this sharename have used or not? if have used, add (label) at the end of sharename
	                check_share="`echo $sharename_list | grep *$sharename* `"
	                if [ "x$check_share" != "x" ];then
	                        sharename="$sharename($label)"
	                fi
	                #add sharename in sharename_list
	                sharename_list="$sharename_list*$sharename*"
	
	                if [ "x$1" != "x" ];then
	                        print_onesharefolder_config "$sharename" "$access"
	                        map_usb_to_ftp "$1" "$relative_path" "$sharename" "$access"
	                fi
		fi
                let j=$j+1
        done

}

generate_proftpd_conf()
{
	# USB Storage -- FTP (via Internet)
	if [ "$($config get usb_enableFvia)" = "0" ]; then
		local proto="$($config get wan_proto)"

		if [ "$proto" = "pppoe" -o "$proto" = "pptp" -o "$proto" = "mulpppoe1" ]; then
			wan_ifname="ppp0"
		else
			wan_ifname="eth1"
		fi

		wan_ifvalue=`ifconfig | grep ^$wan_ifname`
		if [ "x$wan_ifvalue" != "x" ];then
			wan_ipaddr=`ifconfig $wan_ifname | sed 2p -n | awk '/inet/{print $2}' | awk -F: '{print $2}'`
		else
			wan_ipaddr=""
		fi
	else
		wan_ipaddr=""
	fi
	
	# USB Storage -- FTP(via lan)
	if [ "$($config get usb_enableFTP)" = "0" ]; then
		lan_ipaddr=$($config get lan_ipaddr)
	else
		lan_ipaddr=""
	fi

	print_common_head >$proftpd_tmpfile

	check_all_folder_limit
	if [ $? = 0 ]; then
	cat << EOF >>$proftpd_tmpfile
	<Anonymous /tmp/ftpadmin/>
	User admin
	UserAlias anonymous admin
	RequireValidShell off
	</Anonymous>
	<Anonymous /tmp/ftpadmin/>
	User guest
	UserAlias anonymous guest
	RequireValidShell off
	</Anonymous>
EOF
       fi
	
	# everytime before re-mount,umount the already folder,delete it clearly...
	umount_all "ftpadmin"
	umount_all "ftpguest"

	#find all usb disks	
	scan_disk_entries

	print_common_tail >>$proftpd_tmpfile

	if [ "$($config get ap_mode)" = "1" -a "$($config get usb_enableFTP)" = "1" -a "x$($config get leafp2p_run)" != "x" ]; then
                cat << EOF >>$proftpd_tmpfile
<Class LeafNets>
        From 5.0.0.0/24
</Class>
<Limit LOGIN>
        AllowClass LeafNets
        DenyAll
</Limit>
EOF
	fi
	
	mv -f $proftpd_tmpfile $PROFTPD_CONF
}

ftp_start() {
	# add lock mechenism to synchronize file writting
	k=0
	while true;do
		if [ -f $TMP_LOCK_FILE ];then
			sleep 1
			let k=$k+1
			if [ $k -ge 30 ];then
				rm -f $TMP_LOCK_FILE
			fi
		else
			touch $TMP_LOCK_FILE
			break
		fi
	done
		
	test -f $TMP_LOCK_FILE || exit 1

	ftp_enable=$($config get usb_enableFTP)
	ftpvia_enable=$($config get usb_enableFvia)

	# GUI: "0" --> Enable; "1" --> Disable
	# if either of the ftp-lan or ftp-wan is ticked,then start the ftp service...
	if [ "$ftp_enable" = "0" -o "$ftpvia_enable" = "0" ]
	then
		config_ftp_user
		# everytime proftpd start,create working dir for admin and guest user,
		# to avoid user logining failed,,if there are no working dirs bulit.
		creat_cur_workdir
		generate_proftpd_conf

		[ -f $PROFTPD_CONF ] && /usr/sbin/proftpd -c $PROFTPD_CONF
	fi

	rm -f $TMP_LOCK_FILE
}

case "$1" in
	stop)
		killall proftpd
	;;
	start)
		killall proftpd
		ftp_start
	;;
	restart)
		killall proftpd
		ftp_start
	;;
esac
