#!/bin/sh

#
# It seems that "/etc/init.d/AAA" can't start some application 
# such as NTP etc by calling "/etc/init.d/BBB restart" ?_?
#

config=/bin/config
media_server_enable=$($config get upnp_enableMedia)

MINIDLNA_CONF=/tmp/etc/minidlna.conf
MINIDLNA_DB=/tmp/minidlna
MAX_FREE_SPACE=0

DISK_FIND_TABLE=/tmp/find_disk_abcxzy
TMP_DATA_XYZ=/tmp/tmp_data_xyz
TMP_DEVICE_NAME=/tmp/tmp_device_name_xyz

print_dlna_conf() {
cat <<EOF
port=8200
network_interface=br0
friendly_name=$3
album_art_names=Cover.jpg/cover.jpg/AlbumArtSmall.jpg/albumartsmall.jpg/AlbumArt.jpg/albumart.jpg/Album.jpg/album.jpg/Folder.jpg/folder.jpg/Thumb.jpg/thumb.jpg
inotify=yes
enable_tivo=$4
strict_dlna=yes
presentation_url=http://www.routerlogin.net
notify_interval=900
serial=12345678
model_number=1
EOF
}
 
mount1()
{
cat <<EOF
media_dir=/tmp/mnt/$1$2
EOF
}

print_db_dir()
{
cat <<EOF
db_dir=$1
log_dir=$1
EOF
}
map_usb_to_dlna()
{
        case "$3" in
                0 | 1)
			dir_num=$(($dir_num+1))
			FREE_SPACE=`df -m | grep /tmp/mnt/$1 | awk '{print $4}'`
			if [ $FREE_SPACE -gt $MAX_FREE_SPACE ]; then
				MAX_FREE_SPACE=$FREE_SPACE
				[ -d $MINIDLNA_DB ] && rm -rf $MINIDLNA_DB
				MINIDLNA_DB=/tmp/mnt/$1/.ReadyDLNA
			fi
			mount1 "$1" "$2"
			;;
                2)    echo "Admin folder cannot apply!";;
                *);;
        esac
}

isdafake(){

	df | awk '{print $1}' | grep ^/dev/sd | cut -c 6->$TMP_DEVICE_NAME
	while read LINE
	do
		if [ "$LINE" = "$1" ];then
			return 1
			break;
		fi
	done<$TMP_DEVICE_NAME
	
	return 0
}

Itoa()
{
	array="U T S R Q P O N M L K J I H G F E D C B A"
	i=0
	for ch in $array;do
		if [ "$i" = "$1" ];then
			echo "$ch"
			break
		fi
		let i=$i+1
	done
}

get_vendor_from_disk()
{
	dev=`echo "$1" | cut -c 1-3`
	vendor=`cat /sys/block/$dev/device/vendor`
	model=`cat /sys/block/$dev/device/model`

	vendor=$(echo ${vendor} | sed 's/[[:space:]]*$//')
	model=$(echo ${model} | sed 's/[[:space:]]*$//')

	device_vendor="$vendor $model"
	echo "$device_vendor"
}


construct_volume()
{
	tmp_capacity=$2
	if [ $tmp_capacity -ge 1024 ] ;then
		GByte=`expr $tmp_capacity / 1024`
		left=`expr $tmp_capacity % 1024`
		left=`expr $left \* 100`
		left=`expr $left / 1024`

		len=`echo ${left} | wc -L`
		if [ $len -eq 1 -a $left -ne 0 ];then
			left=0$left
		fi

		if [ $left -eq 0 ];then
			format_capacity="$GByte GB"
		else
			format_capacity="$GByte.$left GB"
		fi
	else
		format_capacity="$2 MB"
	fi

	echo "$1 Drive ($format_capacity)"
}


# parameters:
#$1---> disk name"sda1 or sdb1 or sdc"
#$2---> label "U T O P Q"
#$3--->capacity "3.23GB  456MB"
get_volume_from_disk()
{
	volume=`/usr/sbin/vol_id -L /dev/$1`
	if [ "x$volume" = "x" ];then
		volume=`construct_volume "$2" "$3"`
	fi
	echo "$volume"
}

scan_disk_entries()
{
	i=0
	rm -f $DISK_FIND_TABLE
	cat /proc/partitions | awk '{print $3,$4}' | grep sd >$TMP_DATA_XYZ
	while read LINE
	do
		capacity=`echo $LINE | awk '{print $1}'`
		M_capacity=`expr $capacity / 1024`

		if [ "$M_capacity" = "0" ]; then
			continue
		fi

		part_name=`echo $LINE | awk '{print $2}'`

		label=`Itoa "$i"`
		if [ "x$label" = "x" ]; then
			continue
		fi

		# ignore the dev like "sdb" except it is loop partition table 
		if [ "`echo ${#part_name}`" != "4" -a "`grep $part_name /proc/partitions | wc -l`" != "1" ]; then
			continue
		fi

		let i=$i+1

		if isdafake "$part_name"
		then
			continue
		fi

		vendor=`get_vendor_from_disk "$part_name"`
		volume=`get_volume_from_disk "$part_name" "$label" "$M_capacity"`

		if [ "x$vendor" = "x" -o "x$volume" = "x" ];then
			continue
		fi
		echo "$part_name*$vendor*$volume">>$DISK_FIND_TABLE

		if [ $i -ge 20 ];then
			break
		fi
	done<$TMP_DATA_XYZ

	rm -f $TMP_DATA_XYZ
}

get_devnam_fromlabel()
{
	if [ ! -f $DISK_FIND_TABLE ];then
		return
	fi

	while read LINE
	do
		if [ "x$LINE" = "x" ];then
			break
		fi

		dev_nam=`echo $LINE | awk -F* '{print $1}'`
		vendor=`echo $LINE | awk -F* '{print $2}'`
		volume=`echo $LINE | awk -F* '{print $3}'`

		if [ "$vendor" = "$1" -a "$volume" = "$2" ];then
			echo $dev_nam
			break
		fi

	done<$DISK_FIND_TABLE
}

dlna_start() {
	PID_file=/var/run/cmddlna.pid
	test -f $PID_file && kill $(cat $PID_file)
	echo "$$" > $PID_file
	sleep 5

	local name=$($config get upnp_serverName)
	[ "x$name" = "x" ] && name="ReadyDLNA: $(cat /module_name)"
	dir_num=0

	[ -f $MINIDLNA_CONF ] && rm -f $MINIDLNA_CONF
	[ ! -d /tmp/etc ] && mkdir /tmp/etc

	print_dlna_conf "$($config get lan_ipaddr)" "$($config get lan_netmask)" "$name" "$($config get upnp_enable_tivo)" > $MINIDLNA_CONF

	scan_disk_entries

	j=0
	while true
	do
		sharefolder_item=$($config get "shared_usb_folder$j")
		if [ "x$sharefolder_item" = "x" ];then
			break;
		fi
		
		sharename=`echo "$sharefolder_item" | awk -F* '{print $1}'` 
	    relative_path=`echo "$sharefolder_item" | awk -F* '{print $2}'`
		 readable=`echo $sharefolder_item | awk -F* '{print $3}'`
		 writable=`echo $sharefolder_item | awk -F* '{print $4}'`
		   volume=`echo $sharefolder_item | awk -F* '{print $5}'`
		   vendor=`echo $sharefolder_item | awk -F* '{print $6}'`
		   
		   let access=$readable+$writable
		
		dev=`get_devnam_fromlabel "$vendor" "$volume"`
		if [ "x$dev" != "x" ];then
			map_usb_to_dlna "$dev" "$relative_path" "$access" >> $MINIDLNA_CONF
		fi
		
		let j=$j+1
	done

	if [ "$dir_num" -gt 0 ]; then
		print_db_dir "$MINIDLNA_DB" >> $MINIDLNA_CONF
		if [ -d $MINIDLNA_DB ]; then
			rm -rf $MINIDLNA_DB
		fi
		echo "$MINIDLNA_DB/core-%e" > /proc/sys/kernel/core_pattern
		/usr/sbin/minidlna -f $MINIDLNA_CONF
	fi

	rm -f $PID_file
}

change_ip_restart() 
{
	if [ "$media_server_enable" = "1" -a -e "$MINIDLNA_CONF"  -a "x$(grep db_dir $MINIDLNA_CONF)" != "x" ]; then
		while [ -n "$(pidof minidlna)" ]
			do
			sleep 1
		done
		/usr/sbin/minidlna -f $MINIDLNA_CONF
	fi
}

echo "check minidlna ... " >/dev/console
case "$1" in
	stop)
		killall minidlna
	;;
	start)
		killall minidlna
		[ "$media_server_enable" = "1" ] && dlna_start
	;;
	restart)
		killall minidlna
		[ "$media_server_enable" = "1" ] && dlna_start
	;;
	ip_restart)
		killall minidlna
		change_ip_restart
	;;
esac
